CMD_TESTING = os.getenv('ALIENPY_NEWSHELL', '')

if CMD_TESTING:
    import cmd2

    async def create_cmd():
        app = Commander()
        app.preloop()
        await app.InitWB()
        return app

    class Commander(cmd2.Cmd):
        global AlienSessionInfo

        websocket = None
        json_out = ''
        file = None
        cd_parser = None
        parser = argparse.ArgumentParser()
        ls_list = []

        prompt = f"jsh: {AlienSessionInfo['currentdir']} >"

        def __init__(self):
            cmd2.Cmd.__init__(self)

            # Initiate cmd2. Set history file and allow the use of IPython to create scripts
            homedir = Path.home().as_posix()
            super().__init__(self, persistent_history_file= homedir + '/.alienpy_hist', use_ipython=True)

            # Give scripts made by the user access to this class
            self.locals_in_py = True

            # Sets the completer for lcd equal to the local file system
            self.complete_lcd = self.path_complete

            # Set the completer for cd equal to all files/directories in the current directory
            self.cd_parser = self.parser.add_argument('cd', choices=self.ls_list, type=str)

        async def InitWB(self):
            if not self.websocket:
                self.websocket = await InitConnection()
            ls_list = await get_completer_list(self.websocket)

        async def decorator(self):
            self.ls_list = await get_completer_list(self.websocket)

        async def parseCMD(self, args = ''):
            result = await AlienSendCmd(self.websocket, args)
            ProcessReceivedMessage(result, None, self.json_out)

        def do_echo(self, arg):
            print(arg)

        def do_quit(self, arg):
            print('Goodbye!')
            exit(0)

        async def do_cd(self, arg):
            await self.parseCMD('cd ' + arg)
            getSessionVars(self.websocket)

        async def do_ls(self, arg):
            await self.parseCMD('ls ' + arg)

        async def do_cat(self, arg):
            await self.parseCMD('cat ' + arg)

        async def do_whereis(self, arg):
            await self.parseCMD('whereis ' + arg)

        async def do_cp(self, arg):
            await self.parseCMD('cp ' + arg)

        async def do_time(self, arg):
            await self.parseCMD('time ' + arg)

        async def do_mkdir(self, arg):
            await self.parseCMD('mkdir ' + arg)

        async def do_find(self, arg):
            await self.parseCMD('find ' + arg)

        async def do_listFilesFromCollection(self, arg):
            await self.parseCMD('listFilesFromCollection ' + arg)

        async def do_submit(self, arg):
            await self.parseCMD('submit ' + arg)

        async def do_motd(self, arg):
            await self.parseCMD('motd ' + arg)

        async def do_access(self, arg):
            await self.parseCMD('access ' + arg)

        async def do_commit(self, arg):
            await self.parseCMD('commit ' + arg)

        async def do_packages(self, arg):
            await self.parseCMD('packages ' + arg)

        async def do_pwd(self, arg):
            await self.parseCMD('pwd ' + arg)

        async def do_ps(self, arg):
            await self.parseCMD('ps ' + arg)

        async def do_rmdir(self, arg):
            await self.parseCMD('rmdir ' + arg)

        async def do_rm(self, arg):
            await self.parseCMD('rm ' + arg)

        async def do_masterjob(self, arg):
            await self.parseCMD('masterjob ' + arg)

        async def do_user(self, arg):
            await self.parseCMD('user ' + arg)

        async def do_touch(self, arg):
            await self.parseCMD('touch ' + arg)

        async def do_type(self, arg):
            await self.parseCMD('type ' + arg)

        async def do_kill(self, arg):
            await self.parseCMD('kill ' + arg)

        async def do_lfn2guid(self, arg):
            await self.parseCMD('lfn2guid ' + arg)

        async def do_guid2lfn(self, arg):
            await self.parseCMD('guid2lfn ' + arg)

        async def do_guid2lfn_csd(self, arg):
            await self.parseCMD('guid2lfn_csd ' + arg)

        async def do_w(self, arg):
            await self.parseCMD('w ' + arg)

        async def do_uptime(self, arg):
            await self.parseCMD('uptime ' + arg)

        async def do_chown(self, arg):
            await self.parseCMD('chown ' + arg)

        async def do_deleteMirror(self, arg):
            await self.parseCMD('deleteMirror ' + arg)

        async def do_df(self, arg):
            await self.parseCMD('df ' + arg)

        async def do_du(self, arg):
            await self.parseCMD('du ' + arg)

        async def do_fquota(self, arg):
            await self.parseCMD('fquota ' + arg)

        async def do_jquota(self, arg):
            await self.parseCMD('jquota ' + arg)

        async def do_listSEDistance(self, arg):
            await self.parseCMD('listSEDistance ' + arg)

        async def do_listTransfer(self, arg):
            await self.parseCMD('listTransfer ' + arg)

        async def do_md5sum(self, arg):
            await self.parseCMD('md5sum ' + arg)

        async def do_mirror(self, arg):
            await self.parseCMD('mirror ' + arg)

        async def do_resubmit(self, arg):
            await self.parseCMD('resubmit ' + arg)

        async def do_top(self, arg):
            await self.parseCMD('top ' + arg)

        async def do_groups(self, arg):
            await self.parseCMD('groups ' + arg)

        async def do_token(self, arg):
            await self.parseCMD('token ' + arg)

        async def do_uuid(self, arg):
            await self.parseCMD('uuid ' + arg)

        async def do_stat(self, arg):
            await self.parseCMD('stat ' + arg)

        async def do_listSEs(self, arg):
            await self.parseCMD('listSEs ' + arg)

        async def do_xrdstat(self, arg):
            await self.parseCMD('xrdstat ' + arg)

        async def do_whois(self, arg):
            await self.parseCMD('whois ' + arg)

    async def JAlienShellNew(json_out = ''):
        global AlienSessionInfo

        cwd_grid_path = Path(AlienSessionInfo['currentdir'])
        home_grid_path = Path(AlienSessionInfo['alienHome'])

        app = await create_cmd()
        app.json_out = json_out
        while True:
            signal.signal(signal.SIGINT, signal_handler)
            INPUT = ''
            try:
                INPUT = input(f"jsh: {AlienSessionInfo['currentdir']} >")
            except EOFError:
                exit_message()
            if not INPUT: continue

            app.runcmds_plus_hooks([INPUT])
        app.postloop()
        # app.cmdloop()




        if CMD_TESTING:
            asyncio.get_event_loop().run_until_complete(JAlienShellNew(json_output))








